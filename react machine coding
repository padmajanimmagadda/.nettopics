Here are some of the most commonly asked React machine coding interview questions for developers with around 2 years of experience, along with detailed explanations and example answers.

### 1. **Building a To-Do List Application**

**Question:**
Implement a simple To-Do list application in React where users can add, remove, and toggle tasks as completed.

**Answer:**

```jsx
import React, { useState } from 'react';

function TodoApp() {
    const [tasks, setTasks] = useState([]);
    const [inputValue, setInputValue] = useState('');

    const handleAddTask = () => {
        if (inputValue.trim()) {
            setTasks([...tasks, { text: inputValue, completed: false }]);
            setInputValue('');
        }
    };

    const handleToggleTask = (index) => {
        const newTasks = tasks.map((task, i) => (
            i === index ? { ...task, completed: !task.completed } : task
        ));
        setTasks(newTasks);
    };

    const handleRemoveTask = (index) => {
        setTasks(tasks.filter((_, i) => i !== index));
    };

    return (
        <div>
            <h1>Todo List</h1>
            <input
                type="text"
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                placeholder="Add a new task"
            />
            <button onClick={handleAddTask}>Add Task</button>
            <ul>
                {tasks.map((task, index) => (
                    <li key={index} style={{ textDecoration: task.completed ? 'line-through' : 'none' }}>
                        {task.text}
                        <button onClick={() => handleToggleTask(index)}>
                            {task.completed ? 'Undo' : 'Complete'}
                        </button>
                        <button onClick={() => handleRemoveTask(index)}>Remove</button>
                    </li>
                ))}
            </ul>
        </div>
    );
}

export default TodoApp;

```

**Explanation:**

- **useState** is used to manage the state of tasks and the input field.
- **handleAddTask** adds a new task to the list.
- **handleToggleTask** toggles the completion status of a task.
- **handleRemoveTask** removes a task from the list.

### 2. **Counter Component with Increment and Decrement**

**Question:**
Create a counter component that allows the user to increment or decrement a value.

**Answer:**

```jsx
import React, { useState } from 'react';

function Counter() {
    const [count, setCount] = useState(0);

    return (
        <div>
            <h1>Counter: {count}</h1>
            <button onClick={() => setCount(count + 1)}>Increment</button>
            <button onClick={() => setCount(count - 1)}>Decrement</button>
        </div>
    );
}

export default Counter;

```

**Explanation:**

- **useState** manages the counter's state.
- The increment and decrement buttons update the counter value.

### 3. **Searchable List**

**Question:**
Create a component that renders a list of items and allows users to filter the list by typing into a search box.

**Answer:**

```jsx
import React, { useState } from 'react';

function SearchableList() {
    const [items] = useState(['Apple', 'Banana', 'Cherry', 'Date', 'Elderberry']);
    const [searchTerm, setSearchTerm] = useState('');

    const filteredItems = items.filter(item =>
        item.toLowerCase().includes(searchTerm.toLowerCase())
    );

    return (
        <div>
            <input
                type="text"
                placeholder="Search..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
            />
            <ul>
                {filteredItems.map((item, index) => (
                    <li key={index}>{item}</li>
                ))}
            </ul>
        </div>
    );
}

export default SearchableList;

```

**Explanation:**

- **useState** is used to manage the list and the search term.
- The list is filtered based on the user's input in the search box.

### 4. **Toggle Button**

**Question:**
Implement a toggle button that switches between "ON" and "OFF" states.

**Answer:**

```jsx
import React, { useState } from 'react';

function ToggleButton() {
    const [isOn, setIsOn] = useState(false);

    const handleToggle = () => {
        setIsOn(!isOn);
    };

    return (
        <button onClick={handleToggle}>
            {isOn ? 'ON' : 'OFF'}
        </button>
    );
}

export default ToggleButton;

```

**Explanation:**

- **useState** manages the toggle state.
- The button text changes based on the current state.

### 5. **Fetching Data from an API**

**Question:**
Create a component that fetches data from an API and displays it in a list.

**Answer:**

```jsx
import React, { useState, useEffect } from 'react';

function DataFetchingComponent() {
    const [data, setData] = useState([]);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        fetch('<https://jsonplaceholder.typicode.com/posts>')
            .then(response => response.json())
            .then(data => {
                setData(data);
                setLoading(false);
            });
    }, []);

    if (loading) {
        return <p>Loading...</p>;
    }

    return (
        <ul>
            {data.map(item => (
                <li key={item.id}>{item.title}</li>
            ))}
        </ul>
    );
}

export default DataFetchingComponent;

```

**Explanation:**

- **useEffect** is used to fetch data when the component mounts.
- **useState** manages the fetched data and the loading state.

### 6. **Form Handling**

**Question:**
Build a simple form with name and email fields, and display the entered data below the form when submitted.

**Answer:**

```jsx
import React, { useState } from 'react';

function SimpleForm() {
    const [name, setName] = useState('');
    const [email, setEmail] = useState('');
    const [submittedData, setSubmittedData] = useState(null);

    const handleSubmit = (e) => {
        e.preventDefault();
        setSubmittedData({ name, email });
    };

    return (
        <div>
            <form onSubmit={handleSubmit}>
                <div>
                    <label>Name:</label>
                    <input
                        type="text"
                        value={name}
                        onChange={(e) => setName(e.target.value)}
                    />
                </div>
                <div>
                    <label>Email:</label>
                    <input
                        type="email"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                    />
                </div>
                <button type="submit">Submit</button>
            </form>
            {submittedData && (
                <div>
                    <h2>Submitted Data</h2>
                    <p>Name: {submittedData.name}</p>
                    <p>Email: {submittedData.email}</p>
                </div>
            )}
        </div>
    );
}

export default SimpleForm;

```

**Explanation:**

- **useState** is used to manage form fields and submitted data.
- The form prevents default submission behavior and updates the state with entered data.

### 7. **React Router Example**

**Question:**
Implement a simple React application with two routes: a home page and an about page.

**Answer:**

```jsx
import React from 'react';
import { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';

function Home() {
    return <h2>Home Page</h2>;
}

function About() {
    return <h2>About Page</h2>;
}

function App() {
    return (
        <Router>
            <nav>
                <Link to="/">Home</Link>
                <Link to="/about">About</Link>
            </nav>
            <Switch>
                <Route exact path="/" component={Home} />
                <Route path="/about" component={About} />
            </Switch>
        </Router>
    );
}

export default App;

```

**Explanation:**

- **React Router** is used to handle navigation between different pages.
- **Route** and **Switch** components define the routes and render the appropriate components based on the URL.

### 8. **Controlled vs. Uncontrolled Components**

**Question:**
Explain and demonstrate the difference between controlled and uncontrolled components in React.

**Answer:**

- **Controlled Component:**
In a controlled component, form data is handled by the React component's state.
    
    ```jsx
    import React, { useState } from 'react';
    
    function ControlledComponent() {
        const [inputValue, setInputValue] = useState('');
    
        return (
            <input
                type="text"
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
            />
        );
    }
    
    export default ControlledComponent;
    
    ```
    
- **Uncontrolled Component:**
In an uncontrolled component, form data is handled by the DOM itself.
    
    ```jsx
    import React, { useRef } from 'react';
    
    function UncontrolledComponent() {
        const inputRef = useRef(null);
    
        const handleSubmit = () => {
    alert(inputRef.current.value);
    };
    return (
          <div>
              <input type="text" ref={inputRef} />
              <button onClick={handleSubmit}>Submit</button>
          </div>
      );
      }
    
    export default UncontrolledComponent;
    ```
    

**Explanation:**
- A **controlled component** uses state to manage input values.
- An **uncontrolled component** uses refs to access DOM elements directly.

9. Implement a Simple Modal

Create a modal component that shows or hides based on a button click.

model is like pop up or alert that is displayed on the top

```jsx

import React, { useState } from 'react';

function Modal({ isVisible, onClose }) {
  if (!isVisible) return null;

  return (
      <div className="modal">
          <div className="modal-content">
              <h2>Modal Title</h2>
              <p>Some content in the modal.</p>
              <button onClick={onClose}>Close</button>
          </div>
      </div>
  );
}

function App() {
  const [isModalVisible, setModalVisible] = useState(false);

  return (
      <div>
          <button onClick={() => setModalVisible(true)}>Open Modal</button>
          <Modal isVisible={isModalVisible} onClose={() => setModalVisible(false)} />
      </div>
  );
}

export default App;

```

**Explanation:**

- The modal component conditionally renders based on the `isVisible` prop.
- **useState** controls the visibility of the modal.

### 10. **Dynamic Form Fields**

**Question:**
Create a form where users can dynamically add or remove form fields (e.g., multiple email addresses).

**Answer:**

```jsx
import React, { useState } from 'react';

function DynamicForm() {
    const [emails, setEmails] = useState(['']);

    const handleAddEmail = () => {
        setEmails([...emails, '']);
    };

    const handleRemoveEmail = (index) => {
        setEmails(emails.filter((_, i) => i !== index));
    };

    const handleChangeEmail = (index, value) => {
        const newEmails = emails.slice();
        newEmails[index] = value;
        setEmails(newEmails);
    };

    return (
        <div>
            <h2>Dynamic Form</h2>
            <form>
                {emails.map((email, index) => (
                    <div key={index}>
                        <input
                            type="email"
                            value={email}
                            onChange={(e) => handleChangeEmail(index, e.target.value)}
                            placeholder="Email"
                        />
                        <button type="button" onClick={() => handleRemoveEmail(index)}>Remove</button>
                    </div>
                ))}
                <button type="button" onClick={handleAddEmail}>Add Email</button>
            </form>
        </div>
    );
}

export default DynamicForm;

```

**Explanation:**

- **useState** is used to manage an array of emails.
- Users can add or remove email fields dynamically.

### Summary

These questions cover a range of fundamental React concepts, from handling state and forms to fetching data and managing UI elements like modals and lists. Familiarity with these patterns and being able to implement them efficiently will help you excel in React interviews. If you need further explanations or additional examples, feel free to ask!
